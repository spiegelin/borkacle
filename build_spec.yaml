version: 0.1
component: build

timeoutInSeconds: 3600

env:
  variables:
    REGISTRY: mx-queretaro-1.ocir.io
    NAMESPACE: axtwc9mqbq4b
    FRONTEND_REPO: borkacle-frontend
    BOT_REPO: borkacle-bot
    CONTROLLER_REPO: borkacle-controller

steps:
  - type: Command
    name: Login to OCIR
    command: |
      echo "üîë Autenticando en OCIR..."
      echo "${DEVOPS_AUTH_TOKEN}" \
        | docker login $REGISTRY \
            -u "${DEVOPS_USERNAME}" \
            --password-stdin

  - type: Command
    name: Set Version from Git Commit
    command: |
      # Use the first 7 characters of the Git commit hash as the version.
      # This is a standard practice and guarantees a unique version for each build.
      VERSION=$(echo "$OCI_PRIMARY_SOURCE_COMMIT_HASH" | cut -c1-7)
      echo "VERSION=$VERSION" > build_vars.env
      echo "üî¢ Version set from Git commit: $VERSION"

  - type: Command
    name: Build & Push Frontend
    command: |
      source build_vars.env
      docker build --pull --no-cache --platform linux/amd64 \
        -t ${REGISTRY}/${NAMESPACE}/${FRONTEND_REPO}:${VERSION} \
        ./frontend

      docker push ${REGISTRY}/${NAMESPACE}/${FRONTEND_REPO}:${VERSION}

  - type: Command
    name: Build & Push Bot
    command: |
      source build_vars.env
      docker build --pull --no-cache --platform linux/amd64 \
        -t ${REGISTRY}/${NAMESPACE}/${BOT_REPO}:${VERSION} \
        ./bot

      docker push ${REGISTRY}/${NAMESPACE}/${BOT_REPO}:${VERSION}

  - type: Command
    name: Build & Push Controller
    command: |
      source build_vars.env
      docker build --pull --no-cache --platform linux/amd64 \
        -t ${REGISTRY}/${NAMESPACE}/${CONTROLLER_REPO}:${VERSION} \
        ./controller

      docker push ${REGISTRY}/${NAMESPACE}/${CONTROLLER_REPO}:${VERSION}

  - type: Command
    name: Render Kubernetes YAMLs
    command: |
      source build_vars.env
      echo "üìù Rendering Kubernetes manifests with version $VERSION..."
      sed -i 's|${VERSION}|'"$VERSION"'|g' k8s/frontend-deployment.yaml
      sed -i 's|${VERSION}|'"$VERSION"'|g' k8s/bot-deployment.yaml
      sed -i 's|${VERSION}|'"$VERSION"'|g' k8s/controller-deployment.yaml
      echo "‚úÖ Manifests updated successfully."

  - type: Command
    name: Deploy to OKE
    timeoutInSeconds: 400
    command: |
      # These variables must be configured in the Build Pipeline's settings in the OCI Console
      if [ -z "${REGION}" ] || [ -z "${OKE_CLUSTER_ID}" ]; then
        echo "ERROR: REGION and OKE_CLUSTER_ID must be set as environment variables in the build pipeline."
        exit 1
      fi

      # The following are application secrets. For security, they MUST be configured as secret
      # parameters in the OCI Build Pipeline's settings, not stored in this file.
      if [ -z "${DB_URL}" ] || \
         [ -z "${DB_USERNAME}" ] || \
         [ -z "${DB_PASSWORD}" ] || \
         [ -z "${TRUST_STORE_PASSWORD}" ] || \
         [ -z "${KEY_STORE_PASSWORD}" ] || \
         [ -z "${TELEGRAM_BOT_TOKEN}" ] || \
         [ -z "${TELEGRAM_BOT_NAME}" ] || \
         [ -z "${JWT_SECRET}" ] || \
         [ -z "${JWT_EXPIRATION_MS}" ]; then
        echo "ERROR: All application secrets (DB_URL, DB_USERNAME, etc.) must be set as secret environment variables in the build pipeline."
        exit 1
      fi

      # Install required tools
      echo "‚¨áÔ∏è Installing OCI CLI and kubectl..."
      pip install --quiet oci-cli
      curl --silent --location -o kubectl https://storage.googleapis.com/kubernetes-release/release/v1.28.0/bin/linux/amd64/kubectl
      chmod +x kubectl
      mv kubectl /usr/local/bin/

      # Configure kubectl to connect to your OKE cluster using the correct resource_principal auth
      echo "‚öôÔ∏è Configuring kubeconfig for cluster..."
      oci ce cluster create-kubeconfig --cluster-id "${OKE_CLUSTER_ID}" --file $HOME/.kube/config --region "${REGION}" --token-version 2.0.0 --auth resource_principal

      # --- DIAGNOSTIC STEP ---
      echo "üîé Listing all files to find the correct path for the wallet..."
      ls -lR

      # Create namespace if it doesn't exist
      echo "Ensuring 'borkacle' namespace exists..."
      kubectl create namespace borkacle || true

      # Create or update application secrets. Values are sourced from secure pipeline variables.
      echo "üîí Creating/updating app-secrets Kubernetes secret..."
      kubectl delete secret app-secrets -n borkacle --ignore-not-found=true
      kubectl create secret generic app-secrets -n borkacle \
        --from-literal=DB_URL="${DB_URL}" \
        --from-literal=DB_USERNAME="${DB_USERNAME}" \
        --from-literal=DB_PASSWORD="${DB_PASSWORD}" \
        --from-literal=TRUST_STORE_PASSWORD="${TRUST_STORE_PASSWORD}" \
        --from-literal=KEY_STORE_PASSWORD="${KEY_STORE_PASSWORD}" \
        --from-literal=TELEGRAM_BOT_TOKEN="${TELEGRAM_BOT_TOKEN}" \
        --from-literal=TELEGRAM_BOT_NAME="${TELEGRAM_BOT_NAME}" \
        --from-literal=JWT_SECRET="${JWT_SECRET}" \
        --from-literal=JWT_EXPIRATION_MS="${JWT_EXPIRATION_MS}"

      # NOTE: The wallet-secret is no longer managed by this pipeline due to OCI parameter size limits.
      # It is assumed that the 'wallet-secret' has been created manually in the 'borkacle' namespace
      # using the instructions from DEPLOY.md. The pipeline now depends on its existence.
      echo "‚ÑπÔ∏è Assuming 'wallet-secret' already exists in the cluster."

      # Deploy all manifests
      echo "üöÄ Applying Kubernetes manifests..."
      kubectl apply -f k8s/app-config.yaml
      kubectl apply -f k8s/bot-service.yaml
      kubectl apply -f k8s/controller-service.yaml
      kubectl apply -f k8s/frontend-service.yaml
      kubectl apply -f k8s/bot-deployment.yaml
      kubectl apply -f k8s/controller-deployment.yaml
      kubectl apply -f k8s/frontend-deployment.yaml

      echo "‚úÖ Deployment complete :D"

  - type: Command
    name: Show Image URIs
    command: |
      source build_vars.env
      echo "FRONTEND_IMAGE=${REGISTRY}/${NAMESPACE}/${FRONTEND_REPO}:${VERSION}"
      echo "BOT_IMAGE=${REGISTRY}/${NAMESPACE}/${BOT_REPO}:${VERSION}"
      echo "CONTROLLER_IMAGE=${REGISTRY}/${NAMESPACE}/${CONTROLLER_REPO}:${VERSION}"

# This section is no longer needed as the build pipeline now handles the deployment directly.
outputArtifacts: []
